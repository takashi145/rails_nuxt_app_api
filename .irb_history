Time.now
TimeWithZone
Tie.current
Time.current
exit
Time.current
Time.now
exit
Time.now.zone
Time.local(2022).zone
I18n.locale
exit
I18n.locale
User.all
exit
User.find(1).created_at_before_type_cast
pp $LOAD_PATH
pp ActiveSupport::Dependencies.autoload_paths
Rails.autoloaders.zeitwerk_enabled?
exit
Hirb::View.enabled?
Hirb.enable
puts Hirb::Helpers::Table.render [[1,2], [2,3]]
Hirb::View.width
exit
rails --version
rails
ls
rails db:migrate
exit
user = User.new
exit
user = User.new
exit
Time.now
user = User.new
Hirb.disable
user = User.new
user.save
user.errors.full_messages
I18n.t("activerecord.attributes.user")
user.password = "aaaaa"
user.save
user.errors.full_messages
exit
User.create(email: "a@a.com")
exit
User.create(email: "a@a.com")
exit
User.create(email: "a@a.com")
exit
User.create(email: "a@a.com")
exit
domain = "@example.com"
email = "a" * (256 - domain.length) + domain
email.length
user = User.new(name: "test", email: email, password: "password")
user.save
user.save
exit
domain = "@example.com"
email = "a" * (256 - domain.length) + domain
email.length
user = User.new(name: "test", email: email, password: "password")
exit
domain = "@example.com"
email = "a" * (256 - domain.length) + domain
email.length
email
256
user = User.new(name: "test", email: email, password: "password")
user.save
user.errors.full_messages
email = "test@test@com"
user.email = email
user.email
user.save
user.errors.full_messages
email = "active@example.com"
User.create(name: "active", email: email, password: "password", activated: true)
user = User.new(name: "test", email: email, password: "password")
user.save
user.errors.full_messages
email = "TEST@test.COM"
user = User.new(name: "test", email: email, password: "password")
user.save
user.email
exit
User.all
exit
payload = { sub: 1 }
Hirb.disable
payload
secret_key = Rails.application.credentials.secret_key_base
token = JWT.encode(payload, secret_key)
token
JWT.decode(token, secret_key)
JWT.decode(token, secret_key)exit
quit;
UserAuth.token_issuer
UserAuth.token_audience

exit
Hirb.disable
include UserAuth::TokenCommons

encrypt
user_id = UserAuth::TokenCommons.decrypt_for(encrypt)
exit
User.first

reload!
User.first
user.remember("a")
User.first
user = User.first
user.remember("a")
user
user
user.forget
user
token1 = UserAuth::RefreshToken.new(user_id: user.id)
token1
token1.payload[:jti]
user.reload
user.refresh_jti == token1.payload[:jti]
UserAuth::RefreshToken.new(token: token1.token
UserAuth::RefreshToken.new(user_id: user.id)
user.reload
user.refresh_jti == token1.payload[:jti]
UserAuth::RefreshToken.new(token: token1.token).entity_for_user
exit
Hirb.disable
user = User.first
user
token = UserAuth::AccessToken.new(user_id: user.id)
token
token.token
UserAuth::AccessToken.new(token: token.token)
UserAuth::AccessToken.new(token: token.token).entity_for_user
UserAuth::AccessToken.new(token: token.token).entity_for_user.id
UserAuth::AccessToken.new(token: token.token).entity_for_user.email
token.payload[:exp]
Time.at(token.payload[:exp])
UserAuth::AccessToken.new(user_id: user.id, payload: {lifetime: 1.hours})
Time.at(token.payload[:exp])
token.lifetime_text
token.payload
token.payload[:sub]
sub = token.payload
sub = token.payload[:sub]
UserAuth::AccessToken.new(token: token.token, options: {sub: sub})
UserAuth::AccessToken.new(token: token.token, options: {sub: sub}).entity_for_user
UserAuth::AccessToken.new(token: token.token, options: {sub: sub}).entity_for_user.email
exit
